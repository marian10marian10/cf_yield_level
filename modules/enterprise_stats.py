import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
import io
import geopandas as gpd
from shapely import wkt

def create_yield_boxplot(df, crop_name):
    """Vytvorenie boxplot grafu pre konkr√©tnu plodinu"""
    crop_data = df[df['crop'] == crop_name].copy()
    
    if crop_data.empty:
        return None
    
    # V√Ωpoƒçet celkov√©ho priemeru
    overall_avg = crop_data['yield_ha'].mean()
    
    fig = go.Figure()
    
    # Boxplot pre ka≈æd√Ω rok
    for year in sorted(crop_data['year'].unique()):
        year_data = crop_data[crop_data['year'] == year]['yield_ha']
        fig.add_trace(go.Box(
            y=year_data,
            name=str(year),
            boxpoints='outliers',
            jitter=0.3,
            pointpos=-1.8
        ))
    
    # Pridanie ƒçiary celkov√©ho priemeru
    fig.add_hline(
        y=overall_avg,
        line_dash="dash",
        line_color="red",
        annotation_text=f"Priemer za obdobie: {overall_avg:.3f} t/ha"
    )
    
    fig.update_layout(
        title=f"Variabilita v√Ωnosov {crop_name} v rokoch {crop_data['year'].min()}-{crop_data['year'].max()}",
        yaxis_title="V√Ωnos (t/ha)",
        xaxis_title="Rok",
        showlegend=False,
        height=500
    )
    
    return fig

def create_yield_trend(df, crop_name):
    """Vytvorenie trendov√©ho grafu v√Ωnosov v ƒçase"""
    crop_data = df[df['crop'] == crop_name].copy()
    
    if crop_data.empty:
        return None
    
    # Agreg√°cia d√°t podƒæa roku
    yearly_stats = crop_data.groupby('year').agg({
        'yield_ha': ['mean', 'std', 'count']
    }).reset_index()
    
    yearly_stats.columns = ['year', 'mean_yield', 'std_yield', 'count_parcels']
    
    fig = go.Figure()
    
    # Priemern√Ω v√Ωnos s chybov√Ωmi pruhmi
    fig.add_trace(go.Scatter(
        x=yearly_stats['year'],
        y=yearly_stats['mean_yield'],
        mode='lines+markers',
        name='Priemern√Ω v√Ωnos',
        line=dict(color='blue', width=3),
        marker=dict(size=8)
    ))
    
    # Chybov√© pruhy (≈°tandardn√° odch√Ωlka)
    fig.add_trace(go.Scatter(
        x=yearly_stats['year'].tolist() + yearly_stats['year'].tolist()[::-1],
        y=(yearly_stats['mean_yield'] + yearly_stats['std_yield']).tolist() + 
           (yearly_stats['mean_yield'] - yearly_stats['std_yield']).tolist()[::-1],
        fill='toself',
        fillcolor='rgba(0,100,80,0.2)',
        line=dict(color='rgba(255,255,255,0)'),
        name='¬±1 ≈°tandardn√° odch√Ωlka'
    ))
    
    fig.update_layout(
        title=f"Trend v√Ωnosov {crop_name} v ƒçase",
        xaxis_title="Rok",
        yaxis_title="V√Ωnos (t/ha)",
        height=400,
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=-0.3,
            xanchor="center",
            x=0.5
        )
    )
    
    return fig

def create_parcel_performance_map(df):
    """Vytvorenie datovej a faktografickej mapy s v√Ωkonnos≈•ou parciel s mrie≈ækou a bez satelitn√©ho pozadia"""
    try:
        import folium
        from folium import plugins
        
        # Agreg√°cia d√°t podƒæa parcele s detailn√Ωmi metrikami
        parcel_stats = df.groupby(['name', 'agev_parcel_id', 'area', 'geometry']).agg({
            'yield_percentage': ['mean', 'std', 'min', 'max'],
            'yield_ha': ['mean', 'std', 'min', 'max'],
            'crop': ['count', 'nunique'],
            'year': ['min', 'max', 'nunique']
        }).reset_index()
        
        # Flatten column names
        parcel_stats.columns = [
            'name', 'agev_parcel_id', 'area', 'geometry',
            'avg_yield_percentage', 'std_yield_percentage', 'min_yield_percentage', 'max_yield_percentage',
            'avg_yield_ha', 'std_yield_ha', 'min_yield_ha', 'max_yield_ha',
            'crop_count', 'crop_unique', 'year_min', 'year_max', 'year_count'
        ]
        
        # Filtrovanie parciel s geometriou
        parcel_stats = parcel_stats.dropna(subset=['geometry'])
        
        if parcel_stats.empty:
            return None
        
        # Konverzia na GeoDataFrame
        parcel_stats['geometry'] = parcel_stats['geometry'].apply(wkt.loads)
        gdf = gpd.GeoDataFrame(parcel_stats, geometry='geometry')
        
        # Nastavenie CRS na WGS84
        gdf.set_crs(epsg=4326, inplace=True)
        
        # V√Ωpoƒçet bounds pre spr√°vny zoom
        bounds = gdf.total_bounds  # [minx, miny, maxx, maxy]
        center_lon = (bounds[0] + bounds[2]) / 2
        center_lat = (bounds[1] + bounds[3]) / 2
        
        # Vytvorenie mapy pomocou folium s datov√Ωm vzhƒæadom
        m = folium.Map(
            location=[center_lat, center_lon],
            zoom_start=10,
            tiles='CartoDB positron',  # ƒåist√Ω, datov√Ω ≈°t√Ωl bez satelitn√©ho pozadia
            control_scale=True
        )
        
        # Dynamick√© nastavenie zoom levelu na z√°klade veƒækosti oblasti
        lon_range = bounds[2] - bounds[0]
        lat_range = bounds[3] - bounds[1]
        max_range = max(lon_range, lat_range)
        
        # V√Ωpoƒçet optim√°lneho zoom levelu - e≈°te bli≈æ≈°ie
        if max_range > 5:  # Veƒæk√° oblas≈• (cel√© Slovensko)
            zoom_level = 10  # Zv√Ω≈°en√© z 8 na 10
        elif max_range > 1:  # Stredn√° oblas≈• (kraj)
            zoom_level = 12  # Zv√Ω≈°en√© z 10 na 12
        elif max_range > 0.1:  # Mal√° oblas≈• (okres)
            zoom_level = 14  # Zv√Ω≈°en√© z 12 na 14
        else:  # Veƒæmi mal√° oblas≈• (obec)
            zoom_level = 16  # Zv√Ω≈°en√© z 14 na 16
        
        # Nastavenie zoom levelu a bounds s dodatoƒçn√Ωm pribl√≠≈æen√≠m
        m.fit_bounds([[bounds[1], bounds[0]], [bounds[3], bounds[2]]])
        # Dodatoƒçn√© pribl√≠≈æenie o 1-2 √∫rovne
        m.zoom_start = zoom_level + 1
        
        # Pridanie mrie≈æky pre datov√Ω vzhƒæad
        grid_spacing = max_range / 20  # 20 riadkov/stƒ∫pcov mrie≈æky
        
        # Pridanie vertik√°lnych ƒçiar mrie≈æky
        for i in range(21):
            lon_pos = bounds[0] + i * grid_spacing
            folium.PolyLine(
                locations=[[bounds[1], lon_pos], [bounds[3], lon_pos]],
                color='rgba(128, 128, 128, 0.3)',
                weight=0.5,
                opacity=0.3
            ).add_to(m)
        
        # Pridanie horizont√°lnych ƒçiar mrie≈æky
        for i in range(21):
            lat_pos = bounds[1] + i * grid_spacing
            folium.PolyLine(
                locations=[[lat_pos, bounds[0]], [lat_pos, bounds[2]]],
                color='rgba(128, 128, 128, 0.3)',
                weight=0.5,
                opacity=0.3
            ).add_to(m)
        
        # Pridanie parciel s kontinu√°lnym farebn√Ωm k√≥dovan√≠m
        # V√Ωpoƒçet min a max hodn√¥t pre farebn√© ≈°k√°lovanie
        min_yield = gdf['avg_yield_percentage'].min()
        max_yield = gdf['avg_yield_percentage'].max()
        
        # Funkcia pre v√Ωpoƒçet farby na z√°klade v√Ωnosnosti - jemnej≈°ie, menej kriklav√© farby
        def get_color(yield_percentage):
            if pd.isna(yield_percentage):
                return '#808080'  # Siv√° pre ch√Ωbaj√∫ce hodnoty
            
            # Normaliz√°cia na rozsah 0-1
            normalized = (yield_percentage - min_yield) / (max_yield - min_yield)
            
            # Jemnej≈°ia farebn√° ≈°k√°la od ƒçervenej (n√≠zka) cez oran≈æov√∫ a ≈ælt√∫ po zelen√∫ (vysok√°)
            if normalized <= 0.33:
                # Od ƒçervenej po oran≈æov√∫ (0.0 - 0.33) - jemnej≈°ie ƒçerven√©
                r = 220
                g = int(100 + 80 * (normalized * 3))
                b = int(50 + 100 * (normalized * 3))
            elif normalized <= 0.66:
                # Od oran≈æovej po ≈ælt√∫ (0.33 - 0.66) - jemnej≈°ie oran≈æov√© a ≈ælt√©
                r = int(220 - 50 * ((normalized - 0.33) * 3))
                g = int(180 + 75 * ((normalized - 0.33) * 3))
                b = int(150 - 100 * ((normalized - 0.33) * 3))
            else:
                # Od ≈æltej po zelen√∫ (0.66 - 1.0) - jemnej≈°ie ≈ælt√© a zelen√©
                r = int(170 - 120 * ((normalized - 0.66) * 3))
                g = int(255 - 50 * ((normalized - 0.66) * 3))
                b = int(50 + 100 * ((normalized - 0.66) * 3))
            
            return f'#{r:02x}{g:02x}{b:02x}'
        
        # Pridanie v≈°etk√Ωch parciel s kontinu√°lnymi farbami
        folium.GeoJson(
            gdf,
            style_function=lambda x: {
                'fillColor': get_color(x['properties']['avg_yield_percentage']),
                'color': '#000000',
                'weight': 1,
                'fillOpacity': 0.8
            },
            tooltip=folium.GeoJsonTooltip(
                fields=['name', 'avg_yield_percentage', 'area'],
                aliases=['Parcela:', 'V√Ωnosnos≈• (%):', 'Plocha (ha):'],
                localize=True,
                sticky=False,
                labels=True,
                style="""
                    background-color: rgba(0, 0, 0, 0.8);
                    border: 2px solid white;
                    border-radius: 5px;
                    box-shadow: 3px;
                    color: white;
                    font-weight: bold;
                    font-size: 12px;
                    padding: 5px;
                """
            )
        ).add_to(m)
        

        
        # Pridanie fullscreen tlaƒçidla
        plugins.Fullscreen().add_to(m)
        
        # Pridanie minimapy
        minimap = plugins.MiniMap(tile_layer='CartoDB positron', zoom_level_offset=-5)
        m.add_child(minimap)
        
        return m
        
    except Exception as e:
        st.error(f"Chyba pri vytv√°ran√≠ datovej mapy: {e}")
        return None

def show_enterprise_statistics(df, selected_crop):
    """Zobrazenie ≈°tatist√≠k na √∫rovni podniku"""
    # Z√°kladn√© ≈°tatistiky
    st.header("üìä Prehƒæad d√°t")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Celkov√Ω poƒçet z√°znamov", f"{len(df):,}")
    
    with col2:
        st.metric("Poƒçet parciel", f"{df['agev_parcel_id'].nunique():,}")
    
    with col3:
        st.metric("Poƒçet plod√≠n", f"{df['crop'].nunique()}")
    
    with col4:
        st.metric("Obdobie", f"{df['year'].min()} - {df['year'].max()}")
    
    # Anal√Ωza vybranej plodiny
    st.header(f"üå± Anal√Ωza plodiny: {selected_crop}")
    
    if selected_crop:
        crop_data = df[df['crop'] == selected_crop]
        
        # Grafy pre vybran√∫ plodinu
        col1, col2 = st.columns(2)
        
        with col1:
            boxplot_fig = create_yield_boxplot(df, selected_crop)
            if boxplot_fig:
                st.plotly_chart(boxplot_fig, use_container_width=True)
        
        with col2:
            trend_fig = create_yield_trend(df, selected_crop)
            if trend_fig:
                st.plotly_chart(trend_fig, use_container_width=True)
    
    # Anal√Ωza v√Ωkonnosti parciel
    st.header("üèÜ V√Ωkonnos≈• parciel")
    
    # Top parcele podƒæa v√Ωnosnosti
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìä Top 10 parciel podƒæa v√Ωnosnosti")
        top_parcels = df.groupby('name')['yield_percentage'].mean().sort_values(ascending=False).head(10)
        
        # Vytvorenie atrakt√≠vneho grafu s gradientom farieb
        # Zoradenie parciel od najvy≈°≈°ieho percenta (hore) po najni≈æ≈°ie (dole)
        fig = go.Figure()
        fig.add_trace(go.Bar(
            x=top_parcels.values,
            y=top_parcels.index,
            orientation='h',
            marker=dict(
                color=top_parcels.values,
                colorscale='Greens',
                showscale=True,
                colorbar=dict(title="V√Ωnosnos≈• (%)")
            ),
            text=[f"{val:.1f}%" for val in top_parcels.values],
            textposition='auto'
        ))
        
        # Nastavenie y-axis v opaƒçnom porad√≠ - najvy≈°≈°ie percento bude hore
        fig.update_layout(
            title="Top parcele podƒæa priemernej v√Ωnosnosti (%)",
            height=400,
            xaxis_title="V√Ωnosnos≈• (%)",
            yaxis_title="Parcela",
            showlegend=False,
            plot_bgcolor='rgba(0,0,0,0)',
            paper_bgcolor='rgba(0,0,0,0)',
            yaxis=dict(
                autorange='reversed'  # Obr√°ti poradie - najvy≈°≈°ie percento bude hore
            )
        )
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        st.subheader("üìâ Najhor≈°ie parcele")
        worst_parcels = df.groupby('name')['yield_percentage'].mean().sort_values().head(10)
        
        # Vytvorenie atrakt√≠vneho grafu s gradientom farieb
        # Zoradenie parciel od najvy≈°≈°ieho percenta (hore) po najni≈æ≈°ie (dole)
        # Najni≈æ≈°ie percento bude na spodku grafu s najs√Ωtej≈°ou ƒçervenou
        fig = go.Figure()
        fig.add_trace(go.Bar(
            x=worst_parcels.values,
            y=worst_parcels.index,
            orientation='h',
            marker=dict(
                color=worst_parcels.values,
                colorscale='Reds_r',  # Obr√°ten√° ƒçerven√° ≈°k√°la - najni≈æ≈°ie percento = najs√Ωtej≈°ia ƒçerven√°
                showscale=True,
                colorbar=dict(title="V√Ωnosnos≈• (%)")
            ),
            text=[f"{val:.1f}%" for val in worst_parcels.values],
            textposition='auto'
        ))
        
        # Nastavenie y-axis - najvy≈°≈°ie percento bude hore, najni≈æ≈°ie dole
        fig.update_layout(
            title="Najhor≈°ie parcele podƒæa priemernej v√Ωnosnosti (%)",
            height=400,
            xaxis_title="V√Ωnosnos≈• (%)",
            yaxis_title="Parcela",
            showlegend=False,
            plot_bgcolor='rgba(0,0,0,0)',
            paper_bgcolor='rgba(0,0,0,0)'
            # Odstr√°nen√© autorange='reversed' - teraz sa zobrazuje v norm√°lnom porad√≠
        )
        st.plotly_chart(fig, use_container_width=True)
    
    # Kompaktn√© vysvetlenie metodiky priamo pod grafmi
    st.markdown("---")
    st.markdown("**üìä Metodika:** Percent√° = (Skutoƒçn√Ω v√Ωnos / Priemern√Ω v√Ωnos) √ó 100. Priemern√Ω v√Ωnos sa poƒç√≠ta ako aritmetick√Ω priemer v≈°etk√Ωch parciel pre dan√∫ plodinu a rok. 100% = priemer, >100% = nadpriemer, <100% = podpriemer.")
    
    # Mapa parciel - datov√° mapa s mrie≈ækou
    st.header("üó∫Ô∏è Datov√° mapa parciel")
    
    col1, col2 = st.columns([3, 1])
    with col1:
                    st.info("T√°to datov√° mapa zobrazuje v≈°etky parcele s mrie≈ækou, jemn√Ωm farebn√Ωm k√≥dovan√≠m podƒæa v√Ωnosnosti a detailn√Ωmi ≈°tatistikami. Ka≈æd√° parcela m√° unik√°tnu jemn√∫ farbu od ƒçervenej (n√≠zka) cez oran≈æov√∫ a ≈ælt√∫ po zelen√∫ (vysok√° v√Ωnosnos≈•).")
    
    with col2:
        if st.button("üìä Exportova≈• mapu", key="export_enterprise_map"):
            st.info("Funkcia exportu mapy bude implementovan√° v ƒèal≈°ej verzii.")
    
    with st.spinner("Generujem datov√∫ mapu parciel s mrie≈ækou..."):
        map_fig = create_parcel_performance_map(df)
        if map_fig:
            # Pre folium mapu pou≈æ√≠vame st.components.html
            folium_static = map_fig._repr_html_()
            st.components.v1.html(folium_static, height=700)
            

        else:
            st.warning("Nepodarilo sa vytvori≈• datov√∫ mapu. Skontrolujte geometrick√© d√°ta.")
    
    # Export d√°t
    st.header("üíæ Export d√°t")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("Export CSV"):
            csv = df.to_csv(index=False, encoding='utf-8-sig')
            st.download_button(
                label="Stiahnu≈• CSV",
                data=csv,
                file_name=f"vynosy_analyza_{pd.Timestamp.now().strftime('%Y%m%d')}.csv",
                mime="text/csv"
            )
    
    with col2:
        if st.button("Export Excel"):
            # Vytvorenie Excel s√∫boru
            output = io.BytesIO()
            with pd.ExcelWriter(output, engine='openpyxl') as writer:
                df.to_excel(writer, sheet_name='V√Ωnosy', index=False)
            output.seek(0)
            
            st.download_button(
                label="Stiahnu≈• Excel",
                data=output.getvalue(),
                file_name=f"vynosy_analyza_{pd.Timestamp.now().strftime('%Y%m%d')}.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
